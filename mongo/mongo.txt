# docker run -d -p 27017:27017 -v $(pwd):/dataeng --name mongo mongo:latest

# mongoimport --drop -c companies --uri mongodb://127.0.0.1/companies companies.json

# tf step could be filtered

use companies
db.companies.find()
db.word_tf.drop()
db.companies.mapReduce(
    function() {
        if (this.overview) {
            var words = this.overview.replace(/\n/gi, " ").replace(/<\/?[^>]+(>|$)/g, "").replace(/[^\w\s]/gi, "")
            var filtered = words.split(" ").filter(Boolean)
            var numOfWords = filtered.length
            for (var i = 0; i < numOfWords; i++) {
                    emit(this._id.str + "_" + filtered[i], 1.0/numOfWords)
            }
        }
    },
    function(key, values) {
        return Array.sum(values)
    },
    {
        out: 'word_tf'
    }
)
db.word_tf.find()


db.word_idf.drop()
db.word_tf.mapReduce(
    function() {
        var splitKey = this._id.split("_")
        var word = splitKey[1]
        var id = splitKey[0]
        emit(word,id + '_' + this.value)
    },
    function(key, values) {
        return values.join(";")
    },
    {
        out: 'word_idf',
        finalize: function(key, reducedVal) {
                        var splitted = reducedVal.split(";")
                        var idf = Math.log(numOfDocs/splitted.length)
                        splitted.forEach(function(part, index){
                            var element = this[index].split("_")
                            element[1] = parseFloat(element[1]) * idf
                            this[index] = element.join("_")
                        },splitted)
                        return splitted.join(";");
                  },
        scope: {
            numOfDocs : db.companies.count()
        }
    }
)
db.word_idf.find()